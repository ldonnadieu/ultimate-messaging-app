import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import { createServer } from 'http';
import { Server } from 'socket.io';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(cors());
app.use(express.json());

// Connexion MongoDB (gratuit)
const MONGODB_URI = "mongodb+srv://username:password@cluster0.mongodb.net/messagerie?retryWrites=true&w=majority";

mongoose.connect(MONGODB_URI || 'mongodb://localhost:27017/messagerie')
  .then(() => console.log('✅ Connecté à MongoDB'))
  .catch(err => console.log('❌ Erreur MongoDB:', err));

// Modèles de données
const contactSchema = new mongoose.Schema({
  name: String,
  email: String,
  phone: String,
  company: String,
  tags: [String],
  leadScore: { type: Number, default: 0 },
  lastContact: Date
});

const messageSchema = new mongoose.Schema({
  contactId: mongoose.Schema.Types.ObjectId,
  content: String,
  type: { type: String, enum: ['incoming', 'outgoing'] },
  channel: String,
  timestamp: { type: Date, default: Date.now },
  aiGenerated: Boolean
});

const Contact = mongoose.model('Contact', contactSchema);
const Message = mongoose.model('Message', messageSchema);

// Routes API
app.get('/api/contacts', async (req, res) => {
  try {
    const contacts = await Contact.find().sort({ lastContact: -1 });
    res.json(contacts);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/contacts', async (req, res) => {
  try {
    const contact = new Contact(req.body);
    await contact.save();
    res.status(201).json(contact);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

app.get('/api/contacts/:id/messages', async (req, res) => {
  try {
    const messages = await Message.find({ contactId: req.params.id }).sort({ timestamp: 1 });
    res.json(messages);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/contacts/:id/messages', async (req, res) => {
  try {
    const message = new Message({
      contactId: req.params.id,
      ...req.body
    });
    await message.save();
    
    // Mettre à jour le dernier contact
    await Contact.findByIdAndUpdate(req.params.id, { lastContact: new Date() });
    
    io.emit('new_message', message);
    res.status(201).json(message);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Simulation IA simple
app.post('/api/ai/suggest-reply', async (req, res) => {
  const { message, context } = req.body;
  
  // Simulation d'IA - En production, intégrez OpenAI API
  const suggestions = [
    "Merci pour votre message ! Comment puis-je vous aider ?",
    "Je comprends votre demande. Voici ce que je peux vous proposer...",
    "Seriez-vous disponible pour en discuter plus en détail ?",
    "Je peux vous aider avec cela immédiatement."
  ];
  
  const randomSuggestion = suggestions[Math.floor(Math.random() * suggestions.length)];
  
  res.json({
    suggestion: randomSuggestion,
    type: 'support',
    confidence: 0.85
  });
});

// WebSocket pour temps réel
io.on('connection', (socket) => {
  console.log('🔗 Utilisateur connecté:', socket.id);
  
  socket.on('join_contact', (contactId) => {
    socket.join(contactId);
  });
  
  socket.on('disconnect', () => {
    console.log('🔒 Utilisateur déconnecté:', socket.id);
  });
});

const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
  console.log(`🚀 Serveur démarré sur le port ${PORT}`);
});